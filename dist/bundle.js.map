{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://game/webpack/bootstrap","webpack://game/webpack/runtime/define property getters","webpack://game/webpack/runtime/hasOwnProperty shorthand","webpack://game/./components/difficulty/difficulty-component.ts","webpack://game/./components/end-game/end-game.ts","webpack://game/./components/game/game.ts","webpack://game/./index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { goToPage } from '../../index'\n\nexport let difficulty = 0\n\nexport const DifficultyPage = (app: HTMLElement) => {\n    difficulty = 0\n    app.innerHTML = `\n<div class=\"container\">\n  <div class=\"difficulty\">\n    <h2 class=\"difficulty__text\">Выбери сложность</h2>\n    <form class=\"difficulty__form\">\n      <div class=\"difficulty__value-wrap\">\n        <label class=\"difficulty__value\">\n          <input type=\"radio\" name=\"difficulty\" value=\"1\">\n          <span>1</span>\n        </label>\n        <label class=\"difficulty__value\">\n          <input type=\"radio\" name=\"difficulty\" value=\"2\">\n          <span>2</span>\n        </label>\n        <label class=\"difficulty__value\">\n          <input type=\"radio\" name=\"difficulty\" value=\"3\">\n          <span>3</span>\n        </label>\n      </div>\n      <button type=\"submit\" class=\"difficulty__start\">Старт</button>\n    </form>\n    </div>\n</div>\n`\n\n    // Перехватываем событие отправки формы\n    const formElement = document.querySelector(\n        '.difficulty__form'\n    ) as HTMLElement\n    formElement.addEventListener('submit', (event) => {\n        // Отменяем стандартное поведение формы\n        event.preventDefault()\n\n        const radioButtons: HTMLInputElement[] = Array.from(\n            document.querySelectorAll('.difficulty__value input[type=\"radio\"]')\n        )\n        for (let radioButton of radioButtons) {\n            if (radioButton.checked) {\n                difficulty = Number(radioButton.value)\n                goToPage('Game')\n                break\n            }\n        }\n        if (!difficulty) {\n            alert('выберите сложность')\n        }\n    })\n\n    // Рисуем видимость выбраного компонента\n    const difValues = document.querySelectorAll('.difficulty__value')\n    const startButton = document.querySelector('.difficulty__start')\n    difValues.forEach((difValue) => {\n        difValue.addEventListener('click', () => {\n            startButton?.classList.add('new-game--active')\n            document\n                .querySelector('.difficulty__value--active')\n                ?.classList.remove('difficulty__value--active')\n            difValue.classList.add('difficulty__value--active')\n        })\n    })\n}\n","import { goToPage } from '../../index'\r\n\r\nconst app: HTMLElement = document.getElementById('root')!\r\n\r\ninterface Time {\r\n    min: string\r\n    sec: string\r\n}\r\n\r\nexport const EndGame = (isWin: Boolean, time: Time) => {\r\n    app.innerHTML += `\r\n        <div class=\"end\">\r\n            <div class=\"end__wrap\">\r\n                <img class=\"end__image\" src=\"./images/${\r\n                    isWin ? 'win' : 'lose'\r\n                }-game.png\" alt=\"${isWin ? 'win' : 'lose'} game\">\r\n                <p class=\"end__status\">${\r\n                    isWin ? 'Вы выиграли!' : 'Вы проиграли!'\r\n                }</p>\r\n                <p class=\"end__time-text\">Затраченое время</p>\r\n                <p class=\"end__time\">${time.min}.${time.sec}</p>\r\n                <button class=\"end__again\">Играть снова</button>\r\n            </div>\r\n        </div>\r\n    `\r\n    const againButton = document.querySelector('.end__again')\r\n    againButton?.addEventListener('click', () => {\r\n        goToPage('Difficulty')\r\n    })\r\n}\r\n","import { goToPage } from '../../index'\nimport { difficulty } from '../difficulty/difficulty-component'\nimport { EndGame } from '../end-game/end-game'\n\ninterface Card {\n    value: string | undefined\n    nod: Element | null\n}\nlet arrCards: Array<string> = []\n\nconst getSuit = (num: number) => {\n    switch (num) {\n        case 1:\n            return 'spades'\n        case 2:\n            return 'hearts'\n        case 3:\n            return 'diamonds'\n        case 4:\n            return 'clubs'\n        default:\n            return 'error'\n    }\n}\nconst getRank = (num: number) => {\n    switch (num) {\n        case 6:\n            return 'six'\n        case 7:\n            return 'seven'\n        case 8:\n            return 'eight'\n        case 9:\n            return 'nine'\n        case 10:\n            return 'ten'\n        case 11:\n            return 'jack'\n        case 12:\n            return 'queen'\n        case 13:\n            return 'king'\n        case 14:\n            return 'ace'\n        default:\n            return 'error'\n    }\n}\nconst checkTheWin = () => {\n    const cards: HTMLElement[] = Array.from(\n        document.querySelectorAll('.game__card')\n    )\n    for (let card of cards) {\n        if (card.dataset.status !== 'open') {\n            return false\n        }\n    }\n    return true\n}\nconst checkTheCuple = (firstOpenCard: Card, secondOpenCard: Card) => {\n    const min: string = document.querySelector(\n        '.timer__counter--min'\n    )!.innerHTML\n    const sec: string = document.querySelector(\n        '.timer__counter--sec'\n    )!.innerHTML\n    if (firstOpenCard.value !== secondOpenCard.value) {\n        EndGame(false, { min: min, sec: sec })\n    } else {\n        firstOpenCard.nod?.setAttribute('data-status', 'open')\n        secondOpenCard.nod?.setAttribute('data-status', 'open')\n\n        if (checkTheWin()) {\n            EndGame(true, { min: min, sec: sec })\n        } else {\n            firstOpenCard.value = ''\n            firstOpenCard.nod = null\n\n            secondOpenCard.value = ''\n            secondOpenCard.nod = null\n        }\n    }\n}\n\nconst startGame = () => {\n    let firstOpenCard: Card = {\n        value: '',\n        nod: null,\n    }\n    let secondOpenCard: Card = {\n        value: '',\n        nod: null,\n    }\n    // актвируем кнопку Начать заново\n    const newGame: HTMLElement = document.querySelector('.new-game')!\n    newGame.classList.add('new-game--active')\n    newGame.addEventListener('click', () => {\n        goToPage('Difficulty')\n    })\n\n    // запуск таймера\n    const min: HTMLElement = document.querySelector('.timer__counter--min')!\n    const sec: HTMLElement = document.querySelector('.timer__counter--sec')!\n\n    let second: string = ''\n    let minute: string = ''\n    setInterval(() => {\n        second = (Number(sec.innerHTML) + 1).toString()\n        if (Number(second) < 60) {\n            sec.innerHTML = Number(second) < 10 ? '0' + second : second\n        } else {\n            minute = (Number(min.innerHTML) + 1).toString()\n            min.innerHTML = Number(minute) < 10 ? '0' + minute : minute\n            sec.innerHTML = '00'\n        }\n    }, 1000)\n\n    // Ивент на клик карты\n    const cards = document.querySelectorAll('.game__card')\n    cards.forEach((card) => {\n        card.addEventListener('click', () => {\n            // проверка, чтобы ивент не отрабатывал на уже открытые карты\n            const htmlCard = card as HTMLElement\n            if (htmlCard.dataset.status !== 'open') {\n                htmlCard.setAttribute(\n                    'src',\n                    `../../assets/images/${htmlCard.dataset.value}.jpg`\n                )\n                // если первая карта открыта переворачиваем вторую и проверяем пара ли это\n                if (!firstOpenCard.value) {\n                    firstOpenCard.value = htmlCard.dataset.value\n                    firstOpenCard.nod = htmlCard\n                } else {\n                    secondOpenCard.value = htmlCard.dataset.value\n                    secondOpenCard.nod = htmlCard\n                    checkTheCuple(firstOpenCard, secondOpenCard)\n                }\n            }\n        })\n    })\n}\nconst fillCardsArray = (numbers: number) => {\n    // генерация карт\n    let rank = ''\n    let suit = ''\n    for (let i = 0; i < numbers / 2; i++) {\n        // проверка на больше одной пары одинаковых карт в игре\n        do {\n            rank = getRank(Math.floor(Math.random() * 9) + 6)\n            suit = getSuit(Math.floor(Math.random() * 4) + 1)\n        } while (\n            arrCards.includes(\n                `<img data-value=\"${rank}-of-${suit}\" class=\"game__card\" src=\"../../assets/images/${rank}-of-${suit}.jpg\" alt=\"card\"/>`\n            )\n        )\n\n        let card = `<img data-value=\"${rank}-of-${suit}\" class=\"game__card\" src=\"../../assets/images/${rank}-of-${suit}.jpg\" alt=\"card\"/>`\n        arrCards.push(card)\n\n        // добавляем пару\n        let index = Math.floor(Math.random() * numbers) + 1\n\n        // поиск случайного места для пары\n        let isFindSlot = false\n        while (!isFindSlot) {\n            if (!arrCards[index]) {\n                arrCards[index] = card\n                isFindSlot = true\n            } else if (index === numbers) {\n                index = 1\n            } else {\n                index++\n            }\n        }\n    }\n\n    // переворачиваем карты, рубашкой вверх\n    setTimeout(() => {\n        const cards = document.querySelectorAll('.game__card')\n        cards.forEach((card) => {\n            card.setAttribute('src', '../../assets/images/dealer-shirt.jpg')\n        })\n    }, 5000)\n}\n\nexport const Game = (app: HTMLElement) => {\n    // опции сложности\n    arrCards = []\n    switch (difficulty) {\n        case 1:\n            fillCardsArray(6)\n            break\n        case 2:\n            fillCardsArray(12)\n            break\n        case 3:\n            fillCardsArray(18)\n            break\n        default:\n            break\n    }\n\n    app.innerHTML = `\n    <div class=\"container\">\n        <div class=\"game\">\n            <div class=\"header\">\n                <div class=\"timer\">\n                    <div class=\"timer__text\">\n                        <div class=\"timer__text-min\">min</div>\n                        <div class=\"timer__text-sec\">sec</div>\n                    </div>\n                    <div class=\"timer__counter\">\n                    <span class=\"timer__counter--min\">00</span>.<span class=\"timer__counter--sec\">00</span></div>\n                </div>\n                <button class=\"new-game\">Начать заново</button>\n            </div>\n\n            <main class=\"game-wrap\">\n                <div class=\"game__field\">\n                    ${arrCards.map((card) => card).join('')}\n                </div>\n            </main>\n        </div>\n    </div>\n  `\n\n    // Запуск игры, активность кнопок и запуск таймера после предпоказа карт\n    setTimeout(startGame, 5000)\n}\n","import { DifficultyPage } from './components/difficulty/difficulty-component'\r\nimport { Game } from './components/game/game'\r\nimport * as _ from 'lodash'\r\n\r\nconst app: HTMLElement = document.getElementById('root')!\r\nlet page = 'Difficulty'\r\n\r\nexport const goToPage = (newPage: string) => {\r\n    page = newPage\r\n    renderApp()\r\n}\r\n\r\nconst renderApp = () => {\r\n    switch (page) {\r\n        case 'Difficulty':\r\n            DifficultyPage(app)\r\n            break\r\n        case 'Game':\r\n            Game(app)\r\n            break\r\n        default:\r\n            console.log('404')\r\n            break\r\n    }\r\n}\r\n\r\n// start\r\nrenderApp()\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","difficulty","app","document","getElementById","EndGame","isWin","time","innerHTML","min","sec","againButton","querySelector","addEventListener","goToPage","arrCards","getSuit","num","getRank","startGame","firstOpenCard","value","nod","secondOpenCard","newGame","classList","add","second","minute","setInterval","Number","toString","querySelectorAll","forEach","card","htmlCard","dataset","status","setAttribute","Array","from","checkTheWin","checkTheCuple","fillCardsArray","numbers","rank","suit","i","Math","floor","random","includes","push","index","isFindSlot","setTimeout","page","newPage","renderApp","event","preventDefault","radioButton","checked","alert","difValues","startButton","difValue","remove","DifficultyPage","map","join","Game","console","log"],"sourceRoot":""}